Python version: Jupyterlite 
KL algorithm
Shubham Raut
Date: 15/10/2023
***********************************************

def Dvalue():                               
    c3 = []                                 #  store the D-values                                          
    external=0
    internal=0
    D=0
    
    #calculating the d value
    for gh in cut1:                           # present in set c1
        for nd in M.neighbors(gh):          # Getting neighbour nodes near to nodes in cut1
            for x in new_c1:             # Checking the each neighbor nodes with cut1-if matches neighbor node is in cut1 
                if nd==x:
                    internal=internal+1
            for mn in new_c2:            # Checking the each neighbor nodes with cut2-if matches neighbor node is in cut2 
                if nd==gh:
                    external=external+1
        D=external-internal                               # Calculating D value
        c3.append(D)                        # Storing in matrix cut3
        internal=0
        external=0
    for gh in cut2:                           # We are in se cut2
        for nd in M.neighbors(gh):          # Getting neighbour nodes near to nodes in cut2
            for x in new_c2:             # Checking each neighbor nodes with cut1-if matches neighbor node is in cut1 
                if nd==x:
                    internal=internal+1
            for mn in new_c1:            # Checking each neighbor nodes with cut2-if matches neighbor node is in cut2 
                if nd==gh:
                    external=external+1
        D=external-internal
        c3.append(D)                        # Storing the values into cut3
        internal=0
        external=0
    print('D-values=',c3)



    #PRINTING GAIN VALUE
    c5={}                                                       # Listing all gain values 
    for rr in cut1:                                               # Calculating gain
        for tt in cut2:
            if tt in M.neighbors(rr):
                g=c3[c4.index(rr)]+c3[c4.index(tt)]-2
                c5[rr,tt]=g
            else:
                g=c3[c4.index(rr)]+c3[c4.index(tt)]
                c5[rr,tt]=g
    print('Gains=',c5)
    maxv = max(c5.values())                                     # Find the maximum value
    max_key=None
    for key, value in c5.items():                               # Finding the index
        if value == maxv:
            max_key = key
    print('Max gain=',maxv,'Nodes swapping=',max_key)
    all_gain.append(maxv)
    

    if len(cut1)!=1:                                              # Swpping and updating the cutsets cut1 and cut2
        cut1.remove(max_key[0])
        cut2.remove(max_key[1])
        update_cut1.remove(max_key[0])
        update_cut1.append(max_key[1])
        update_cut2.remove(max_key[1])
        update_cut2.append(max_key[0])
        print('After swapping cut1',new_c1)
        print('After swapping cut2',new_c2,'\n')
    
    c4.clear()                                                  # Resetting cutsets to find for next loop eleminating the swapped nodes
    for x in cut1:
        c4.append(x)
    for x in cut2:
        c4.append(x)
    
    return all_gain         
    return new_c1        
    return new_c2
    
************************************************************************************************************************************

import networkx as mynet                                           # Importing networkx
import matplotlib.pyplot as out                                 
S=mynet.Graph()
S.add_nodes_from([1,2,3,4,5,6,7,8])                             # Fixing nodes
S.add_edges_from([(1,3),(2,3),(4,6),(5,6),(3,7),(6,7),(7,8)])   # Fixing edges 

#ADDING CUTSETS
cut1 = [1,5,6,7]                      # Cutset c1
cut2 = [2,3,4,8]                      # Cutset c2
new_c1=[1,5,6,7]                        # This cutset is same as cut1 but used to eleminate the nodes which are swapped
new_c2=[2,3,4,8]                        # Variables to store all values in cut1 and cut2 in one
best1=[]                          # Stores the final best cutset cut1
best2=[]                          # Stores the final best cutset cut2
all_gain=[]                         # Stores all max gain values from each swapping
c4=[]
cumulative_gains=[]                 # Stores the cumulative gains 
final_c1=[]                         # Stores the final best cutset cut1
final_c2=[]                         # Stores the final best cutset cut2
Sum=0                               # Variable to store and print cumulative gains
for x in cut1:                        # Appending cut1 nad cut2 in cut4                        
    c4.append(x)
for x in cut2:
    c4.append(x)
for ii in new_c1:                # Loop to initiate the KL-Algorithm
    Dvalue()                        # Calling function Dvalue()
    best1=full_c1+new_c1       # Appending all the nodes in new_c1 after each iteration 
    best2=full_c2+new_c2       # Appending all the nodes in new_c2 after each iteration
                            
for ov in all_gain:                 # Loop for cumulative gain
    Sum=Sum+ov
    cumulative_gains.append(Sum)
print('\n\nAll maximun gains from each swapping=',all_gain)
print('Cumulative_gains=',cumulative_gains)
val=cumulative_gains.index(max(cumulative_gains))          # Finding the maxing cumulative gain
length=val*len(new_c1)
while (val*len(new_c1)<=length<=(val*len(new_c1))+(len(new_c1)-1)):       # Sorting final best cutsets 
    final_c1.append(full_c1[length])
    final_c2.append(full_c2[length])
    length=length+1
print('The best partitioning cutset is: cut1=',final_c1,'cut2=',final_c2)
